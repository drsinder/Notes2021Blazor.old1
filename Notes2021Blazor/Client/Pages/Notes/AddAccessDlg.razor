@using Notes2021Blazor.Shared
@using System.Timers
@inject HttpClient Http
@inject IModalService ModalService

@if (NoteFile == null)
{
    <p class="center"><em>Loading...</em></p>
}
else
{
<div class="roundedgrayindexinput modal-body">
    <h3>Add Access Element for User</h3>

    <h5>Select the User</h5>

    <select @bind="selectedUserId">
        <option value="none">Choose from below</option>
        @foreach (UserData item in userData)
        {
            <option value="@item.UserId">@item.DisplayName</option>
        }
    </select>
    <br /><br />
    <button type="button" @onclick="Create" class="btn btn-info btn-sm">Create</button>

    <button type="button" @onclick="Cancel" class="btn btn-info btn-sm">Cancel</button>
</div>
}

    @code {

        [CascadingParameter] ModalParameters Parameters { get; set; }

        protected int fileId { get; set; }

        protected List<UserData> userData { get; set; }

        protected NoteFile NoteFile { get; set; }

        protected string selectedUserId { get; set; }

        protected Timer delay { get; set; }

        protected override void OnParametersSet()
        {
            selectedUserId = "none";

            userData = Parameters.Get<List<UserData>>("UserList");

            NoteFile = Parameters.Get<NoteFile>("NoteFile");

            if (NoteFile == null)
                Cancel();
        }

        private void Cancel()
        {
            ModalService.Close(ModalResult.Cancel());
        }

        private async Task Create()
        {
            if (selectedUserId != "none")
            {
                NoteAccess item = new NoteAccess();

                item.UserID = selectedUserId;
                item.NoteFileId = NoteFile.Id;
                item.ArchiveId = 0;
                // all access options left false

                await Http.PostJsonAsync("api/AccessList", item);

                delay = new Timer(250);
                delay.Enabled = true;
                delay.Elapsed += Done;

                return;
            }

            ModalService.Close(ModalResult.Cancel());
        }

        private void Done(Object source, ElapsedEventArgs e)
        {
            delay.Enabled = false;
            delay.Stop();
            ModalService.Close(ModalResult.Cancel());
        }


}
